// Decompiled with JetBrains decompiler
// Type: Hacknet.MissionGenerator
// Assembly: Hacknet, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 44D58447-4185-43DF-BEF1-8BBDED416CAA
// Assembly location: E:\SteamLibrary\steamapps\common\Hacknet\Hacknet.exe

using Microsoft.Xna.Framework.Content;
using System;
using System.Collections.Generic;
using System.IO;

namespace Hacknet
{
  public static class MissionGenerator
  {
    public static int generationCount = 0;
    private static bool customKeysWereSet = false;
    private static string customFileData = (string) null;
    private const int FILE_DELETION = 0;
    private const int WEBSITE_CHANGE = 1;
    private const int TYPES_OF_GENERATED_MISSIONS = 2;
    private static ContentManager content;
    private static List<List<string>> MissionLists;

    public static void init(ContentManager contentManager)
    {
      MissionGenerator.content = contentManager;
      MissionGenerator.MissionLists = new List<List<string>>();
      for (int index = 0; index < 2; ++index)
      {
        string path2;
        switch (index)
        {
          case 0:
            path2 = Path.Combine("Missions", "Generated", "FileDeletion");
            break;
          case 1:
            path2 = Path.Combine("Missions", "Generated", "WebsiteChange");
            break;
          default:
            path2 = (string) null;
            break;
        }
        MissionGenerator.MissionLists.Add(new List<string>());
        foreach (FileSystemInfo file in new DirectoryInfo(Path.Combine(MissionGenerator.content.RootDirectory, path2)).GetFiles("*.*"))
          MissionGenerator.MissionLists[index].Add(Path.Combine("Content", path2, Path.GetFileName(file.Name)));
      }
    }

    public static object generate(int secutiryLevel)
    {
      int type = 0;
      if (secutiryLevel <= 3)
      {
        type = 0;
      }
      else
      {
        type = 0;
        if (Utils.flipCoin())
          type = 1;
      }
      int index = (int) ((double) (MissionGenerator.MissionLists[type].Count - 1) * Utils.random.NextDouble() + 0.5);
      string filename = MissionGenerator.MissionLists[type][index];
      MissionGenerator.customKeysWereSet = false;
      MissionGenerationParser.Client = NameGenerator.generateName();
      MissionGenerationParser.Other = "Unknown";
      MissionGenerationParser.Target = NameGenerator.generateName();
      ComputerLoader.MissionPreLoadComplete += (Action) (() =>
      {
        Computer computer1 = (Computer) MissionGenerator.generateComputer(secutiryLevel, MissionGenerationParser.Target);
        Computer computer2;
        switch (type)
        {
          case 1:
            computer2 = MissionGenerator.addWebsiteChangeRequirements(computer1, OS.currentInstance);
            break;
          default:
            computer2 = MissionGenerator.addFileDeletionRequirements(computer1, OS.currentInstance);
            break;
        }
        computer2.idName = "Gen" + (object) MissionGenerator.generationCount;
        MissionGenerationParser.Comp = computer2.idName;
        OS.currentInstance.netMap.nodes.Add(computer2);
      });
      ActiveMission activeMission = (ActiveMission) ComputerLoader.readMission(filename);
      ComputerLoader.MissionPreLoadComplete = (Action) null;
      activeMission.wasAutoGenerated = true;
      activeMission.genTarget = MissionGenerationParser.Comp;
      activeMission.genPath = MissionGenerationParser.Path;
      activeMission.genFile = MissionGenerationParser.File;
      activeMission.client = MissionGenerationParser.Client;
      activeMission.genTargetName = MissionGenerationParser.Target;
      activeMission.genOther = MissionGenerationParser.Other;
      ++MissionGenerator.generationCount;
      return (object) activeMission;
    }

    public static object generateComputer(int secLevel, string name = null)
    {
      if (name == null)
        name = NameGenerator.generateName();
      Computer computer = new Computer(name, NetworkMap.generateRandomIP(), OS.currentInstance.netMap.getRandomPosition(), secLevel, (byte) 2, OS.currentInstance);
      if ((double) computer.traceTime <= 0.0)
        computer.traceTime = 10f * Computer.BASE_TRACE_TIME;
      return (object) computer;
    }

    public static void setMissionGenerationKeys(Dictionary<string, string> keys)
    {
      MissionGenerationParser.File = !keys.ContainsKey("File") ? (string) null : MissionGenerationParser.parse(keys["File"]);
      MissionGenerator.customFileData = !keys.ContainsKey("Data") ? (string) null : MissionGenerationParser.parse(keys["Data"]);
      MissionGenerationParser.Path = !keys.ContainsKey("Path") ? (string) null : MissionGenerationParser.parse(keys["Path"]);
      if (keys.ContainsKey("Client"))
        MissionGenerationParser.Client = keys["Client"];
      if (keys.ContainsKey("Comp"))
        MissionGenerationParser.Comp = keys["Comp"];
      MissionGenerator.customKeysWereSet = true;
    }

    private static Computer addFileDeletionRequirements(Computer c, OS os)
    {
      string nameEntry = "Archive_Data.zip";
      if (MissionGenerator.customKeysWereSet && MissionGenerationParser.File != null)
        nameEntry = MissionGenerationParser.File;
      FileEntry fileEntry = new FileEntry(MissionGenerator.customFileData != null ? MissionGenerator.customFileData : Computer.generateBinaryString(2000), nameEntry);
      Folder folder = c.files.root.folders[0];
      if (MissionGenerator.customKeysWereSet && MissionGenerationParser.Path != null)
        folder = c.getFolderFromPath(MissionGenerationParser.Path, true);
      folder.files.Add(fileEntry);
      MissionGenerationParser.File = nameEntry;
      if (!MissionGenerator.customKeysWereSet && MissionGenerationParser.Path != null)
        MissionGenerationParser.Path = "home";
      return c;
    }

    private static Computer addWebsiteChangeRequirements(Computer c, OS os)
    {
      WebServerDaemon webServerDaemon = new WebServerDaemon(c, MissionGenerationParser.Target + " Web Server", os, "Content/Web/BaseImageWebPage.html");
      c.daemons.Add((Daemon) webServerDaemon);
      c.initDaemons();
      if (MissionGenerator.customKeysWereSet && MissionGenerator.customFileData != null)
        webServerDaemon.generateBaseCorporateSite(MissionGenerationParser.Target, MissionGenerator.customFileData);
      else
        webServerDaemon.generateBaseCorporateSite(MissionGenerationParser.Target, "Content/Web/BaseCorporatePage.html");
      MissionGenerationParser.File = "index.html";
      MissionGenerationParser.Path = "web";
      return c;
    }
  }
}
