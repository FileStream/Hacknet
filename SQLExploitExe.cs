// Decompiled with JetBrains decompiler
// Type: Hacknet.SQLExploitExe
// Assembly: Hacknet, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 44D58447-4185-43DF-BEF1-8BBDED416CAA
// Assembly location: E:\SteamLibrary\steamapps\common\Hacknet\Hacknet.exe

using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Graphics;

namespace Hacknet
{
  internal class SQLExploitExe : ExeModule
  {
    private SQLExploitExe.SQLState state = SQLExploitExe.SQLState.Intro;
    private float currentStateTimer = 0.0f;
    private float timeTaken = 0.0f;
    private float initStringCharDelay = 0.1f;
    private const float INTRO_TIME = 3f;
    private const float MAIN_INTRO_TIME = 3f;
    private const float MAIN_BODY_TIME = 5f;
    private const float ENDING_TIME = 1.2f;
    public const string initText = "Initializing###.#.#.#\nConnecting###.#.#.#.#.#.#.#.#..#.\nInjecting Corrupt Sectors###.#.#.##.#.#.#";
    public const string mainIntrotext = "MEMORY CORRUPTION DETECTED\n##Initializing SQL Core Dump##>#>##>#>#>#>>>>>";
    public const string errorIntrotext = "M3^ORK CO3@PI\"} DGT^C.D\n##Ini$$!l^zi/g SQ: -!re 3@Hp##>#>##>#>#>#>>>>>";
    private string[] bodyText;
    private Color flashColor;
    private Color brightDrawColor;

    public SQLExploitExe(Rectangle location, OS operatingSystem)
      : base(location, operatingSystem)
    {
      this.name = "SQLMemoryCorrupter";
      this.IdentifierName = "SQL Memory Corruption Injector";
      this.ramCost = 350;
    }

    public override void LoadContent()
    {
      base.LoadContent();
      this.bodyText = Utils.readEntireFile("Content/EffectFiles/SQLMemoryCorruptionDump.txt").Split(Utils.newlineDelim);
      this.initStringCharDelay = 3f / (float) "Initializing###.#.#.#\nConnecting###.#.#.#.#.#.#.#.#..#.\nInjecting Corrupt Sectors###.#.#.##.#.#.#".Replace("#", "@@").Length;
      this.flashColor = this.os.lockedColor;
      this.flashColor.A = (byte) 0;
      this.brightDrawColor = this.os.unlockedColor;
      this.brightDrawColor.A = (byte) 0;
      Programs.getComputer(this.os, this.targetIP).hostileActionTaken();
    }

    public override void Update(float t)
    {
      base.Update(t);
      this.timeTaken += t;
      this.currentStateTimer += t;
      SQLExploitExe.SQLState state = this.state;
      this.updateState();
      if (this.state == state)
        return;
      this.currentStateTimer = 0.0f;
    }

    private void updateState()
    {
      float num1 = this.timeTaken - 3f;
      if ((double) num1 <= 0.0)
      {
        this.state = SQLExploitExe.SQLState.Intro;
      }
      else
      {
        float num2 = num1 - 3f;
        if ((double) num2 <= 0.0)
        {
          this.state = SQLExploitExe.SQLState.MainIntro;
        }
        else
        {
          float num3 = num2 - 5f;
          if ((double) num3 <= 0.0)
            this.state = SQLExploitExe.SQLState.MainBody;
          else if ((double) (num3 - 1.2f) <= 0.0)
            this.state = SQLExploitExe.SQLState.Ending;
          else if (!this.isExiting)
          {
            this.Completed();
            this.isExiting = true;
          }
        }
      }
    }

    public override void Draw(float t)
    {
      base.Draw(t);
      Rectangle empty = Rectangle.Empty;
      this.drawOutline();
      this.drawTarget("app:");
      Rectangle bounds = this.bounds;
      bounds.X += 2;
      bounds.Width -= 4;
      bounds.Height -= Module.PANEL_HEIGHT + 1;
      bounds.Y += Module.PANEL_HEIGHT;
      this.drawBackground(bounds);
      switch (this.state)
      {
        case SQLExploitExe.SQLState.Intro:
          this.drawIntro(bounds);
          break;
        case SQLExploitExe.SQLState.MainIntro:
          this.drawMainIntro(bounds);
          break;
        case SQLExploitExe.SQLState.MainBody:
          this.drawMainBody(bounds);
          break;
        case SQLExploitExe.SQLState.Ending:
          this.drawEnding(bounds);
          break;
      }
    }

    private void drawBackground(Rectangle dest)
    {
      this.spriteBatch.Draw(Utils.gradient, dest, this.os.highlightColor * 0.2f);
    }

    private void drawIntro(Rectangle dest)
    {
      this.spriteBatch.DrawString(GuiData.detailfont, this.getDelayDrawString("Initializing###.#.#.#\nConnecting###.#.#.#.#.#.#.#.#..#.\nInjecting Corrupt Sectors###.#.#.##.#.#.#", -1f), new Vector2((float) (dest.X + 2), (float) (dest.Y + 2)), Color.White);
    }

    private void drawMainIntro(Rectangle dest)
    {
      if ((double) this.currentStateTimer < 0.800000011920929)
      {
        if ((double) this.currentStateTimer % 0.200000002980232 < 0.0700000002980232)
          PatternDrawer.draw(dest, 3f, this.os.darkBackgroundColor * 0.2f, this.os.lockedColor, this.spriteBatch, PatternDrawer.binaryTile);
        else
          this.spriteBatch.DrawString(GuiData.detailfont, "M3^ORK CO3@PI\"} DGT^C.D\n##Ini$$!l^zi/g SQ: -!re 3@Hp##>#>##>#>#>#>>>>>".Replace("#", ""), new Vector2((float) (dest.X + 2), (float) (dest.Y + 2)), Color.White);
      }
      else
        this.spriteBatch.DrawString(GuiData.detailfont, this.getDelayDrawString("MEMORY CORRUPTION DETECTED\n##Initializing SQL Core Dump##>#>##>#>#>#>>>>>", this.currentStateTimer - 0.8f), new Vector2((float) (dest.X + 2), (float) (dest.Y + 2)), Color.White);
    }

    private void drawMainBody(Rectangle dest)
    {
      this.spriteBatch.DrawString(GuiData.detailfont, "MEMORY CORRUPTION DETECTED\n##Initializing SQL Core Dump##>#>##>#>#>#>>>>>".Replace("#", ""), new Vector2((float) (dest.X + 2), (float) (dest.Y + 2)), Color.White * this.fade);
      int num1 = (int) ((double) this.currentStateTimer / 5.0 * (double) this.bodyText.Length);
      int num2 = dest.Y + 30;
      int num3 = 6;
      int num4 = (dest.Height - 30) / num3;
      int num5 = 0;
      if (num1 > num4)
        num5 = num1 - num4;
      Vector2 position = new Vector2((float) (dest.X + 2), (float) num2);
      for (int index = num5; index < num1; ++index)
      {
        this.spriteBatch.DrawString(GuiData.detailfont, this.bodyText[index], position, Color.White, 0.0f, Vector2.Zero, 0.5f, SpriteEffects.None, 0.3f);
        position.Y += (float) num3;
      }
    }

    private void drawEnding(Rectangle dest)
    {
      float currentStateTimer = this.currentStateTimer;
      this.currentStateTimer = 5f;
      this.drawMainBody(dest);
      this.currentStateTimer = currentStateTimer;
      Rectangle destinationRectangle = new Rectangle(dest.X, dest.Y + dest.Height / 3, dest.Width, dest.Height / 3);
      this.spriteBatch.Draw(Utils.white, destinationRectangle, this.os.unlockedColor * 0.8f);
      destinationRectangle.Height -= 6;
      destinationRectangle.Y += 3;
      this.spriteBatch.Draw(Utils.white, destinationRectangle, this.os.indentBackgroundColor * 0.8f);
      string text = "UNLOCKED";
      Vector2 vector2 = GuiData.font.MeasureString(text);
      Vector2 position = new Vector2((float) (destinationRectangle.X + destinationRectangle.Width / 2) - vector2.X / 2f, (float) (destinationRectangle.Y + destinationRectangle.Height / 2) - vector2.Y / 2f);
      this.spriteBatch.DrawString(GuiData.font, text, position - Vector2.One, this.brightDrawColor * this.fade);
      this.spriteBatch.DrawString(GuiData.font, text, position + Vector2.One, this.brightDrawColor * this.fade);
      this.spriteBatch.DrawString(GuiData.font, text, position, Color.White * this.fade);
    }

    private string getDelayDrawString(string original, float time = -1f)
    {
      if ((double) time == -1.0)
        time = this.currentStateTimer;
      string str = "";
      float num = 0.0f;
      for (int index = 0; index < original.Length; ++index)
      {
        num += this.initStringCharDelay;
        if ((int) original[index] == 35)
          num += this.initStringCharDelay;
        if ((double) this.currentStateTimer >= (double) num && (int) original[index] != 35)
          str += (string) (object) original[index];
      }
      return str;
    }

    public override void Completed()
    {
      base.Completed();
      Computer computer = Programs.getComputer(this.os, this.targetIP);
      if (computer == null)
        return;
      computer.openPort(1433, this.os.thisComputer.ip);
    }

    private enum SQLState
    {
      Intro,
      MainIntro,
      MainBody,
      Ending,
    }
  }
}
