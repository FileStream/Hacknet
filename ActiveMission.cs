// Decompiled with JetBrains decompiler
// Type: Hacknet.ActiveMission
// Assembly: Hacknet, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 44D58447-4185-43DF-BEF1-8BBDED416CAA
// Assembly location: E:\SteamLibrary\steamapps\common\Hacknet\Hacknet.exe

using Hacknet.Extensions;
using Hacknet.Mission;
using System;
using System.Collections.Generic;
using System.Xml;

namespace Hacknet
{
  internal class ActiveMission
  {
    private string[] delims = new string[1]{ "#%#" };
    public bool activeCheck = false;
    private bool hasFinished = false;
    public string[] postingAcceptFlagRequirements = (string[]) null;
    public int requiredRank = 0;
    public int difficulty = 0;
    public bool ShouldIgnoreSenderVerification = false;
    public bool wasAutoGenerated = false;
    public bool willSendEmail = true;
    public List<MisisonGoal> goals;
    public string nextMission;
    public MailServer.EMailData email;
    public int endFunctionValue;
    public string endFunctionName;
    public int startFunctionValue;
    public string startFunctionName;
    public string postingTitle;
    public string postingBody;
    public string reloadGoalsSourceFile;
    public string genTarget;
    public string genPath;
    public string genFile;
    public string genTargetName;
    public string genOther;
    public string client;
    public string target;
    public Dictionary<string, string> generationKeys;

    public ActiveMission(List<MisisonGoal> _goals, string next, MailServer.EMailData _email)
    {
      this.goals = _goals;
      this.nextMission = next;
      this.email = _email;
      this.endFunctionValue = -1;
      this.endFunctionName = "";
      this.postingTitle = this.postingBody = "";
      this.reloadGoalsSourceFile = "Missions/BitMissionIntro.xml";
    }

    public void Update(float t)
    {
      if (!this.activeCheck || (this.hasFinished || !this.isComplete((List<string>) null)))
        return;
      this.finish();
      this.hasFinished = true;
    }

    public string getSaveString()
    {
      string str = "<mission next=\"" + this.nextMission + "\" goals=\"" + this.reloadGoalsSourceFile + "\" reqRank=\"" + (object) this.requiredRank + "\"";
      if (this.wasAutoGenerated)
        str = str + " genTarget=\"" + this.genTarget + "\" genFile=\"" + this.genFile + "\" genPath=\"" + this.genPath + "\"  genTargetName=\"" + this.genTargetName + "\" genOther=\"" + this.genOther + "\"";
      return str + " activeCheck=\"" + (object) this.activeCheck + "\">\n" + "<email sender=\"" + Folder.Filter(this.email.sender) + "\" subject=\"" + Folder.Filter(this.email.subject) + "\">" + Folder.Filter(this.email.body) + "</email>" + "<endFunc val=\"" + (object) this.endFunctionValue + "\" name=\"" + this.endFunctionName + "\" />" + "<posting title=\"" + Folder.Filter(this.postingTitle) + "\">" + Folder.Filter(this.postingBody) + "</posting>" + "</mission>";
    }

    public static object load(XmlReader reader)
    {
      while (reader.Name != "mission")
        reader.Read();
      reader.MoveToAttribute("next");
      string next = reader.ReadContentAsString();
      reader.MoveToAttribute("goals");
      string filename = reader.ReadContentAsString();
      if (reader.MoveToAttribute("genTarget"))
      {
        string str1 = reader.ReadContentAsString();
        reader.MoveToAttribute("genFile");
        string str2 = reader.ReadContentAsString();
        reader.MoveToAttribute("genPath");
        string str3 = reader.ReadContentAsString();
        reader.MoveToAttribute("genTargetName");
        string str4 = reader.ReadContentAsString();
        reader.MoveToAttribute("genOther");
        string str5 = reader.ReadContentAsString();
        MissionGenerationParser.Comp = str1;
        MissionGenerationParser.File = str2;
        MissionGenerationParser.Path = str3;
        MissionGenerationParser.Target = str4;
        MissionGenerationParser.Other = str5;
      }
      reader.MoveToAttribute("activeChack");
      int num1 = 0;
      if (reader.MoveToAttribute("reqRank"))
        num1 = reader.ReadContentAsInt();
      bool flag = reader.ReadContentAsString().ToLower().Equals("true");
      if (next == "NULL_MISSION")
        return (object) null;
      if (!Settings.IsInExtensionMode && !filename.StartsWith("Content"))
        filename = "Content/" + filename;
      List<MisisonGoal> _goals = new List<MisisonGoal>();
      ActiveMission activeMission1 = new ActiveMission(new List<MisisonGoal>(), "NONE", new MailServer.EMailData("Unknown", "Unknown", "Unknown", new List<string>()));
      try
      {
        activeMission1 = (ActiveMission) ComputerLoader.readMission(filename);
        _goals = activeMission1.goals;
        flag = flag || activeMission1.activeCheck;
      }
      catch (Exception ex)
      {
        Utils.SendRealWorldEmail("Mission Load Error", "hacknetbugs+Hacknet@gmail.com", "Hacknet " + MainMenu.OSVersion + "\r\n" + Utils.GenerateReportFromException(ex));
      }
      string sendr = "ERRORBOT";
      string subj = "ERROR";
      string bod = "ERROR :: MAIL LOAD FAILED";
      while (reader.Name != "email" && reader.Name != "endFunc")
        reader.Read();
      if (reader.Name.Equals("email"))
      {
        if (reader.MoveToAttribute("sender"))
          sendr = Folder.deFilter(reader.ReadContentAsString());
        if (reader.MoveToAttribute("subject"))
          subj = Folder.deFilter(reader.ReadContentAsString());
        int content = (int) reader.MoveToContent();
        bod = Folder.deFilter(reader.ReadElementContentAsString());
      }
      MailServer.EMailData _email = new MailServer.EMailData(sendr, bod, subj, activeMission1.email.attachments);
      ActiveMission activeMission2 = new ActiveMission(_goals, next, _email);
      activeMission2.activeCheck = flag;
      activeMission2.reloadGoalsSourceFile = filename;
      activeMission2.requiredRank = num1;
      while (reader.Name != "endFunc")
        reader.Read();
      reader.MoveToAttribute("val");
      int num2 = reader.ReadContentAsInt();
      reader.MoveToAttribute("name");
      string str6 = reader.ReadContentAsString();
      activeMission2.endFunctionName = str6;
      activeMission2.endFunctionValue = num2;
      while (reader.Name != "posting")
        reader.Read();
      reader.MoveToAttribute("title");
      string str7 = Folder.deFilter(reader.ReadContentAsString());
      int content1 = (int) reader.MoveToContent();
      string str8 = Folder.deFilter(reader.ReadElementContentAsString());
      activeMission2.postingTitle = str7;
      activeMission2.postingBody = str8;
      return (object) activeMission2;
    }

    public void addEndFunction(int val, string name)
    {
      this.endFunctionValue = val;
      this.endFunctionName = name;
    }

    public void addStartFunction(int val, string name)
    {
      this.startFunctionValue = val;
      this.startFunctionName = name;
    }

    public void ActivateSuppressedStartFunctionIfPresent()
    {
      if (this.startFunctionName == null)
        return;
      MissionFunctions.runCommand(this.startFunctionValue, this.startFunctionName);
    }

    public bool isComplete(List<string> additionalDetails = null)
    {
      for (int index = 0; index < this.goals.Count; ++index)
      {
        if (!this.goals[index].isComplete(additionalDetails))
          return false;
      }
      return true;
    }

    public void finish()
    {
      OS.currentInstance.branchMissions.Clear();
      if (!this.nextMission.Equals("NONE"))
      {
        string str = "Content/Missions/";
        if (Settings.IsInExtensionMode)
          str = ExtensionLoader.ActiveExtensionInfo.FolderPath + "/";
        ComputerLoader.loadMission(str + this.nextMission, false);
        OS.currentInstance.currentMission.ActivateSuppressedStartFunctionIfPresent();
      }
      else
        OS.currentInstance.currentMission = (ActiveMission) null;
      if (this.endFunctionName != null)
        MissionFunctions.runCommand(this.endFunctionValue, this.endFunctionName);
      OS.currentInstance.saveGame();
      if (!OS.currentInstance.multiplayer)
        return;
      OS.currentInstance.endMultiplayerMatch(true);
    }

    public void sendEmail(OS os)
    {
      if (!this.willSendEmail)
        return;
      ((MailServer) os.netMap.mailServer.getDaemon(typeof (MailServer))).addMail(MailServer.generateEmail(this.email.subject, this.email.body, this.email.sender, this.email.attachments), os.defaultUser.name);
    }
  }
}
